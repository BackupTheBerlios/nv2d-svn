/**
 * NV2D - Social Network Visualization
 * Copyright (C) 2005 Bo Shi
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

package nv2d.plugins.standard;

import java.io.File;
import java.io.IOException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.FactoryConfigurationError;
import javax.xml.parsers.ParserConfigurationException;

import org.xml.sax.SAXException;
import org.xml.sax.SAXParseException;

import org.w3c.dom.Document;
import org.w3c.dom.DOMException;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import java.awt.Container;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.io.IOException;
import java.net.URL;
import javax.swing.JMenu;
import javax.swing.JMenuItem;

import nv2d.plugins.IOInterface;

import nv2d.graph.Graph;
import nv2d.graph.Datum;
import nv2d.graph.directed.DEdge;
import nv2d.graph.directed.DGraph;
import nv2d.graph.directed.DVertex;
import nv2d.ui.NController;

public class GraphmlImporter implements IOInterface {
	String _desc;
	String _name;
	String _author;

	NController _control;

	Document _document;

	public GraphmlImporter() {
		_desc = new String("Import a graph from a GraphML file.");
		_name = new String("GraphmlImporter");
		_author= new String("Bo Shi");
	}

	/** Construct a new graph from the data. */
	public Graph getData(String [] args) throws IOException {
		if(args.length != 1) {
			System.err.println(name() + ": wrong number of arguments");
			return null;
		};
		if(buildDomDocument(args[0])) {
			return process();
		} else {
			return null;
		}
	}

	/** 
	 * Requires a URL location to read a file.
	 * */
	public String [] requiredArgs() {
		String [] r = new String[1];
		r[0] = new String("Location of GraphML file");
		return r;
	}

	public void initialize(Graph g, Container view, NController control) {
		// io-plugins can ignore this
		_control = control;
	}

	public void cleanup() {
		System.out.print("--> cleanup()\n");
	}

	public JMenu menu() {
		JMenu mod = new JMenu(name());
		JMenuItem open = new JMenuItem("Load GraphML File");
		mod.add(open);
		open.addActionListener(new MenuListener());
		return mod;
	}

	public String require() {
		return "";
	}

	public String name() {
		return _name;
	}
	public String description() {
		return _desc;
	}
	public String author() {
		return _author;
	}

	private boolean buildDomDocument(String fileName) {
		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
		//factory.setValidating(true);

		boolean success = false;
		try {
			DocumentBuilder builder = factory.newDocumentBuilder();
			builder.setErrorHandler(new Nv2dXmlErrorHandler());

			_document = builder.parse(new File(fileName));
			success = true;
		} catch (SAXParseException spe) {
			// Error generated by the parser
			System.err.println("\n** Parsing error"
					+ ", line " + spe.getLineNumber()
					+ ", uri " + spe.getSystemId());
			System.err.println("   " + spe.getMessage() );
			
			// Use the contained exception, if any
			Exception  x = spe;
			if (spe.getException() != null)
				x = spe.getException();
			x.printStackTrace();
			
		} catch (SAXException sxe) {
			// Error generated during parsing
			Exception  x = sxe;
			if (sxe.getException() != null)
				x = sxe.getException();
			x.printStackTrace();
			
		} catch (ParserConfigurationException pce) {
			// Parser with specified options can't be built
			pce.printStackTrace();
			
		} catch (IOException ioe) {
			// I/O error
			ioe.printStackTrace();
		}
		return success;
	}

	private Graph process() {
		DGraph graph = new DGraph();
		NodeList vertices = _document.getElementsByTagName("node");
		NodeList edges = _document.getElementsByTagName("edge");
		int i;

		for(i = 0; i < vertices.getLength(); i++) {
			Node v = vertices.item(i);
			String vname = v.getAttributes().getNamedItem("id").getNodeValue();
			DVertex vtx = new DVertex(vname);
			graph.add(vtx);
			System.out.println("node - "+vname);
		}

		for(i = 0; i < edges.getLength(); i++) {
			Node v = edges.item(i);
			String source = v.getAttributes().getNamedItem("source").getNodeValue();
			String dest = v.getAttributes().getNamedItem("target").getNodeValue();
			DVertex vtxSrc = (DVertex) graph.findVertex(source);
			DVertex vtxDest = (DVertex) graph.findVertex(dest);
			DEdge dedge = new DEdge(vtxSrc, vtxDest, 1.0f);
			System.out.println(dedge);
			graph.add(dedge);
		}
		return graph;
	}

	private class MenuListener implements ActionListener {
		public void actionPerformed(ActionEvent e) {
			// open up a dialog asking for one argument
			String s = javax.swing.JOptionPane.showInputDialog(
					null,
					"Please provide the location of the GraphML data file ");

			//If a string was returned, say so.
			if ((s != null) && (s.length() > 0)) {
				String [] arglist = new String[2];
				arglist[0] = name();
				arglist[1] = s;
				_control.initialize(arglist);
			}
		}
	}
}

class Nv2dXmlErrorHandler
		implements org.xml.sax.ErrorHandler {
	public void fatalError(SAXParseException exception)
			throws SAXException {
	}
	
	// treat validation errors as fatal
	public void error(SAXParseException e)
	throws SAXParseException {
		throw e;
	}
	
	// dump warnings too
	public void warning(SAXParseException err)
	throws SAXParseException {
		System.err.println("** Warning"
				+ ", line " + err.getLineNumber()
				+ ", uri " + err.getSystemId());
		System.err.println("   " + err.getMessage());
	}
}
